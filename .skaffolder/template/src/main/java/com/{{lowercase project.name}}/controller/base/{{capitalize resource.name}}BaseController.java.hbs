**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
package com.{{#lowercase project.name}}{{/lowercase}}.controller.base;

import org.springframework.security.access.annotation.Secured;
import java.util.ArrayList;
import java.util.List;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.{{#lowercase project.name}}{{/lowercase}}.db.{{#lowercase db.name}}{{/lowercase}}.service.{{#capitalize resource.name}}{{/capitalize}}Service;
import com.{{#lowercase project.name}}{{/lowercase}}.db.{{#lowercase db.name}}{{/lowercase}}.mapper.{{#capitalize resource._entity.name}}{{/capitalize}};

public class {{#capitalize resource.name}}{{/capitalize}}BaseController {

	{{#capitalize resource.name}}{{/capitalize}}Service {{camelcase resource.name}}Service = new {{#capitalize resource.name}}{{/capitalize}}Service();


{{#notNull resource._entity}}

//CRUD METHODS

{{#each resource._services}}
	{{#equal crudAction 'list'}}
	
    //CRUD - GET LIST
    {{#notNull _roles}}@Secured({"ROLE_PRIVATE_USER"{{joinRoleObj _roles}} }){{/notNull}}
	@RequestMapping(value = "{{../resource.url}}", method = RequestMethod.{{method}}, headers = "Accept=application/json")
	public List<{{#capitalize ../resource._entity.name}}{{/capitalize}}> getList() {
		List<{{#capitalize ../resource._entity.name}}{{/capitalize}}> list = {{camelcase ../resource.name}}Service.getList();
		return list;
	}
	
	
	{{/equal}}
	{{#equal crudAction 'get'}}
	
    //CRUD - GET ONE
    {{#notNull _roles}}@Secured({"ROLE_PRIVATE_USER"{{joinRoleObj _roles}} }){{/notNull}}
	@RequestMapping(value = "{{../resource.url}}{{url}}", method = RequestMethod.{{method}}, headers = "Accept=application/json")
	public {{#capitalize ../resource._entity.name}}{{/capitalize}} get(@PathVariable Long id) {
		{{#capitalize ../resource._entity.name}}{{/capitalize}} obj = {{camelcase ../resource.name}}Service.get(id);
		
		{{#each ../resource._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../../resource/name}}
		//external relation {{name}}
		ArrayList<Long> {{name}} = {{capitalize ../../resource.name}}Service.{{#capitalize ../../resource._entity.name}}{{/capitalize}}_{{name}}Service.findBy_{{../../resource._entity.name}}(id);
		obj.set{{#capitalize name}}{{/capitalize}}({{name}});
		{{/equal}}{{/equal}}{{/each}}
		
		return obj;
	}
	
	{{/equal}}
	{{#equal crudAction 'update'}}

    //CRUD - EDIT
    {{#notNull _roles}}@Secured({"ROLE_PRIVATE_USER"{{joinRoleObj _roles}} }){{/notNull}}
	@RequestMapping(value = "{{../resource.url}}{{url}}", method = RequestMethod.{{method}}, headers = "Accept=application/json")
	public {{#capitalize ../resource._entity.name}}{{/capitalize}} update(@RequestBody {{#capitalize ../resource._entity.name}}{{/capitalize}} obj, @PathVariable("id") Long id) {
		{{#capitalize ../resource._entity.name}}{{/capitalize}} result = {{camelcase ../resource.name}}Service.update(obj, id);

	    {{#each ../resource._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../../resource/name}}
		//external relation {{name}}
		ArrayList<Long> {{name}} = obj.get{{#capitalize name}}{{/capitalize}}();
		if ({{name}} != null) {
			{{capitalize ../../resource.name}}Service.{{capitalize ../../resource._entity.name}}_{{name}}Service.updateRelation(id, {{name}});
		}
		{{/equal}}{{/equal}}{{/each}}
		
		return result;
	}
	
	{{/equal}}
	{{#equal crudAction 'delete'}}
	
    //CRUD - REMOVE
    {{#notNull _roles}}@Secured({"ROLE_PRIVATE_USER"{{joinRoleObj _roles}} }){{/notNull}}
	@RequestMapping(value = "{{../resource.url}}{{url}}", method = RequestMethod.{{method}}, headers = "Accept=application/json")
	public void delete(@PathVariable("id") Long id) {
		{{camelcase ../resource.name}}Service.delete(id);
	}
	
	{{/equal}}
	{{#equal crudAction 'create'}}

    //CRUD - CREATE
    {{#notNull _roles}}@Secured({"ROLE_PRIVATE_USER"{{joinRoleObj _roles}} }){{/notNull}}
	@RequestMapping(value = "{{../resource.url}}", method = RequestMethod.{{method}}, headers = "Accept=application/json")
	public {{#capitalize ../resource._entity.name}}{{/capitalize}} insert(@RequestBody {{#capitalize ../resource._entity.name}}{{/capitalize}} obj) {
		{{#capitalize ../resource._entity.name}}{{/capitalize}} result = {{camelcase ../resource.name}}Service.insert(obj);

	    {{#each ../resource._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../../resource/name}}
		//external relation {{name}}
		ArrayList<Long> {{name}} = obj.get{{#capitalize name}}{{/capitalize}}();
		if ({{name}} != null) {
			{{capitalize ../../resource.name}}Service.{{capitalize ../../resource._entity.name}}_{{name}}Service.updateRelation(result.get_id(), {{name}});
		}
		{{/equal}}{{/equal}}{{/each}}
		
		return result;
	}

	{{/equal}}
	{{#startWith crudAction 'findBy'}}

    //CRUD - FIND BY {{#subStr name 6 }}{{/subStr}}
    {{#notNull _roles}}@Secured({"ROLE_PRIVATE_USER"{{joinRoleObj _roles}} }){{/notNull}}
	@RequestMapping(value = "{{../resource.url}}{{url}}", method = RequestMethod.GET, headers = "Accept=application/json")
	public List<{{#capitalize ../resource._entity.name}}{{/capitalize}}> findBy{{#subStr name 6 }}{{/subStr}}(@PathVariable("key") Long id{{#subStr name 6 }}{{/subStr}}) {
		List<{{#capitalize ../resource._entity.name}}{{/capitalize}}> list = {{camelcase ../resource.name}}Service.findBy{{#subStr name 6 }}{{/subStr}}(id{{#subStr name 6 }}{{/subStr}});
		return list;
	}
	
	{{/startWith}}
	{{#equal crudAction 'findBy'}}

//CRUD - FIND BY ALL
	
	{{/equal}}
	{{#startWith crudAction 'get'}}

//CRUD - GET RELATION {{#subStr name 3 }}{{/subStr}}
	
	{{/startWith}}
	{{#startWith crudAction 'addTo'}}

//CRUD - ADD RELATION IN {{#subStr name 5 }}{{/subStr}}
	
	{{/startWith}}
	{{#startWith crudAction 'removeFrom'}}

//CRUD - REMOVE RELATION IN {{#subStr name 10 }}{{/subStr}}
	
	{{/startWith}}
	{{#startWith crudAction 'linkTo'}}

//CRUD - LINK TO {{#subStr name 6 }}{{/subStr}}
	
	{{/startWith}}
	{{#startWith crudAction 'unlinkFrom'}}

//CRUD - UNLINK FROM {{#subStr name 10 }}{{/subStr}}
	
	{{/startWith}}
	{{#startWith crudAction 'strictLinkListOf'}}

    //CRUD - LINK LIST {{#subStr name 16 }}{{/subStr}}
    {{#notNull _roles}}@Secured({"ROLE_PRIVATE_USER"{{joinRoleObj _roles}} }){{/notNull}}
	@RequestMapping(value = "{{../resource.url}}{{url}}", method = RequestMethod.POST, headers = "Accept=application/json")
	public void linkList{{#subStr name 16 }}{{/subStr}}(@PathVariable("key") Long id{{#subStr name 16 }}{{/subStr}}) {}
	
	{{/startWith}}
{{/each}}{{/notNull}}

/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  {{name}}Custom.js
 */

{{#each resource._services}}
{{#equal crudAction null}}

/*
Name: {{name}}
Description: {{description}}
Params: {{#each _params}}
	{{type}} {{name}} - {{description}}{{/each}}
*/
{{#notNull _roles}}@Secured({"ROLE_PRIVATE_USER"{{joinRoleObj _roles}} }){{/notNull}}
@RequestMapping(value = "{{../resource.url}}{{url}}", method = RequestMethod.{{method}}, headers = "Accept=application/json")
public void {{name}}() {

}
		
	{{/equal}}
{{/each}}

	
}
