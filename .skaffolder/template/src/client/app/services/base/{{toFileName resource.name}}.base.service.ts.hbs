**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  FOR CUSTOMIZE {{resource._entity.name}}BaseService PLEASE EDIT ../{{resource._entity.name}}.service.ts
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
 
//DEPENDENCIES
import { Observable } from 'rxjs/Rx';
import { Http, RequestOptions, Headers, Response } from '@angular/http';
import { Injectable } from '@angular/core';
import 'rxjs/add/operator/map';

// SECURITY
import { AuthenticationService } from '../../security/authentication.service';

// MODEL
import { {{capitalize resource.name}} } from '../../domain/{{toFileName db.name}}/{{toFileName resource.name}}';

// CONFIG
import { config } from "../../../config/properties";

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../{{resource.name}}.service.ts
 */
 
{{#notNull resource._entity}}
/*
 * SCHEMA DB {{resource._entity.name}}
 * 
	{
		{{#each resource._entity._attrs}}
		{{name}}: {
			type: '{{type}}'{{#required}}, 
			required : true{{/required}}{{#unique}},
			unique : true, {{/unique}}{{#if _enum}},
			enum : {{#joinObj _enum 'name'}}{{/joinObj}}, {{/if}}
		},
		{{/each}}
		//RELATIONS
		{{#each resource._relations}}
			{{#equal _ent1.name ../name}}
		{{name}}: {{#equal type 'm:m'}}[{{/equal}}{
			type: Schema.ObjectId{{#required}}, 
			required : true{{/required}},
			ref : "{{_ent2.name}}"
		}{{#equal type 'm:m'}}]{{/equal}},
			{{/equal}}
		{{/each}}
		
		
		//EXTERNAL RELATIONS
		
		{{#each resource._relations}}
			{{#notEqual _ent1.name ../name}}
		{{name}}: {{#equal type 'm:m'}}[{{/equal}}{
			type: Schema.ObjectId{{#required}}, 
			required : true{{/required}},
			ref : "{{_ent1.name}}"
		}{{#equal type 'm:m'}}]{{/equal}},
			{{/notEqual}}
		{{/each}}
		
	}
 * 
 */
 {{/notNull}}
@Injectable()
export class {{#capitalize resource.name}}{{/capitalize}}BaseService {

    contextUrl:string = config.host + "{{resource.url}}";
    constructor(
        protected http: Http,
        protected authenticationService: AuthenticationService) {
        
    }

{{#notNull resource._entity}}
//CRUD METHODS
{{#each resource._services}}
	{{#equal crudAction 'list'}}
	
    /**
     * Get list of items
     */
	
	list(): Observable<{{#capitalize ../resource.name}}{{/capitalize}}[]> {
        return this.http
            .get(this.contextUrl)
            .map(response => response.json() as {{#capitalize ../resource.name}}{{/capitalize}}[])
    }
	{{/equal}}
	{{#equal crudAction 'get'}}
	
    /**
     * Get one item by id
     */
	
	get(id: string): Observable<{{#capitalize ../resource.name}}{{/capitalize}}> {
        return this.http
            .get(this.contextUrl + "/" + id)
            .map(response => response.json() as {{#capitalize ../resource.name}}{{/capitalize}})
    }

	{{/equal}}
	{{#equal crudAction 'update'}}
	
    /**
     * Update item
     */
	update(item: {{#capitalize ../resource.name}}{{/capitalize}}): Observable<{{#capitalize ../resource.name}}{{/capitalize}}> {
        return this.http
            .post(this.contextUrl + '/' + item._id, item)
            .map(response => response.json())
    }
	{{/equal}}
	{{#equal crudAction 'delete'}}
	
	/**
     * Remove one item by id
     */
     remove(id: string): Observable<void> {
        return this.http
            .delete(this.contextUrl + "/" + id)
            .map(response => null);
    }
	{{/equal}}
	{{#equal crudAction 'create'}}
	
	/**
     * Create new item
     */
     create(item: {{#capitalize ../resource.name}}{{/capitalize}}): Observable<{{#capitalize ../resource.name}}{{/capitalize}}> {
        return this.http
            .post(this.contextUrl, item)
            .map(response => response.json());
    }
	{{/equal}}
	{{#startWith crudAction 'findBy'}}
    
    /**
     * Find by {{#subStr name 6 }}{{/subStr}}
     */
    findBy{{subStrCap name 6 }}(id: string): Observable<{{#capitalize ../resource.name}}{{/capitalize}}[]> {
        return this.http
            .get(this.contextUrl + '/findBy{{#subStr name 6 }}{{/subStr}}/' + id)
            .map(response => response.json() as {{#capitalize ../resource.name}}{{/capitalize}}[]);
    }	
	{{/startWith}}
	{{#startWith crudAction 'get'}}
	
	/**
     * Get relation {{#subStr name 3 }}{{/subStr}}
     */
     get{{subStrCap name 3 }}(id: string): Observable<any[]> {
        return this.http
            .get(this.contextUrl + '/' + id + 'get{{subStrCap name 3 }}')
            .map(response => response.json());
     }
	{{/startWith}}
{{/each}}{{/notNull}}


{{#each resource._services}}
{{#equal crudAction null}}

    /*
    Name: {{name}}
    Description: {{description}}
    Params: {{#each _params}}
    	{{type}} {{name}} - {{description}}{{/each}}
    */
    
    {{name}}(...params:any[]): Observable<any> {
        return this.http
            .{{lowercase method}}(this.contextUrl + "{{url}}", {})
            .map(response => response.json());
    }
		
	{{/equal}}
{{/each}}
}
